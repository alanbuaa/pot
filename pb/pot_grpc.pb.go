// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: pb/pot.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PoTExecutor_GetTxs_FullMethodName    = "/pb.PoTExecutor/GetExcutedTxs"
	PoTExecutor_VerifyTxs_FullMethodName = "/pb.PoTExecutor/VerifyTxs"
)

// PoTExecutorClient is the client API for PoTExecutor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PoTExecutorClient interface {
	GetTxs(ctx context.Context, in *GetTxRequest, opts ...grpc.CallOption) (*GetTxResponse, error)
	VerifyTxs(ctx context.Context, in *VerifyTxRequest, opts ...grpc.CallOption) (*VerifyTxResponse, error)
}

type poTExecutorClient struct {
	cc grpc.ClientConnInterface
}

func NewPoTExecutorClient(cc grpc.ClientConnInterface) PoTExecutorClient {
	return &poTExecutorClient{cc}
}

func (c *poTExecutorClient) GetTxs(ctx context.Context, in *GetTxRequest, opts ...grpc.CallOption) (*GetTxResponse, error) {
	out := new(GetTxResponse)
	err := c.cc.Invoke(ctx, PoTExecutor_GetTxs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poTExecutorClient) VerifyTxs(ctx context.Context, in *VerifyTxRequest, opts ...grpc.CallOption) (*VerifyTxResponse, error) {
	out := new(VerifyTxResponse)
	err := c.cc.Invoke(ctx, PoTExecutor_VerifyTxs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PoTExecutorServer is the server API for PoTExecutor service.
// All implementations must embed UnimplementedPoTExecutorServer
// for forward compatibility
type PoTExecutorServer interface {
	GetTxs(context.Context, *GetTxRequest) (*GetTxResponse, error)
	VerifyTxs(context.Context, *VerifyTxRequest) (*VerifyTxResponse, error)
	mustEmbedUnimplementedPoTExecutorServer()
}

// UnimplementedPoTExecutorServer must be embedded to have forward compatible implementations.
type UnimplementedPoTExecutorServer struct {
}

func (UnimplementedPoTExecutorServer) GetTxs(context.Context, *GetTxRequest) (*GetTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExcutedTxs not implemented")
}
func (UnimplementedPoTExecutorServer) VerifyTxs(context.Context, *VerifyTxRequest) (*VerifyTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyTxs not implemented")
}
func (UnimplementedPoTExecutorServer) mustEmbedUnimplementedPoTExecutorServer() {}

// UnsafePoTExecutorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PoTExecutorServer will
// result in compilation errors.
type UnsafePoTExecutorServer interface {
	mustEmbedUnimplementedPoTExecutorServer()
}

func RegisterPoTExecutorServer(s grpc.ServiceRegistrar, srv PoTExecutorServer) {
	s.RegisterService(&PoTExecutor_ServiceDesc, srv)
}

func _PoTExecutor_GetTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoTExecutorServer).GetTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoTExecutor_GetTxs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoTExecutorServer).GetTxs(ctx, req.(*GetTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoTExecutor_VerifyTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoTExecutorServer).VerifyTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoTExecutor_VerifyTxs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoTExecutorServer).VerifyTxs(ctx, req.(*VerifyTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PoTExecutor_ServiceDesc is the grpc.ServiceDesc for PoTExecutor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PoTExecutor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PoTExecutor",
	HandlerType: (*PoTExecutorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetExcutedTxs",
			Handler:    _PoTExecutor_GetTxs_Handler,
		},
		{
			MethodName: "VerifyTxs",
			Handler:    _PoTExecutor_VerifyTxs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/pot.proto",
}
