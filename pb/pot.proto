syntax = "proto3";
package pb;

import "pb/cryptoelement.proto";
option go_package="./pb";

enum MessageType{
  Block_Data = 0;
  Block_Request = 1;
  Block_Response = 2;
  PoT_Request = 3;
  PoT_Response = 4;
  PoT_Proof = 5;
  SendDci_Request = 6;
  DevastateDci_Request = 7;
}
message Block {
  Header Header = 1;
  repeated Tx Txs = 2;
  repeated ExecuteHeader ExecuteHeaders = 3;
}

message Tx{
  bytes data = 1;
}

message PoTMessage {
  MessageType  MsgType = 1;
  bytes  MsgByte = 2;
}

message Header{
  uint64 Height = 1;
  bytes  ParentHash = 2;
  repeated bytes UncleHash = 3;
  bytes Mixdigest = 4;
  bytes Difficulty = 5;
  int64 Nonce = 6;
  bytes Timestamp = 7;
  repeated bytes PoTProof = 8;
  int64 Address = 9;
  bytes Hashes =10;
  string PeerId = 11;
  bytes Pubkey = 12;
  bytes Txhash = 13;
  CryptoElement CryptoElement = 14;
//  bytes ExeHash = 14;
//  bytes Command = 15;
}

message Command {
  int32 Type = 1;
  bytes Operation = 2;
  bytes Proof = 3;
}

message BlockRequest {
  uint64 Height = 1;
  bytes  Hashes = 2;
  int64  srcid = 3;
  int64  desid = 4;
  string src =5;
  string des = 6;
}

message BlockResponse{
  Block block =1;
  string src = 2;
  string des = 3;
  int64  srcid = 4;
  int64  desid = 5;

}

message PoTRequest{
  uint64 Epoch = 1;
  int64  Desid = 2;
  string Des = 3;
  int64  Srcid = 4;
  string Src = 5 ;
}

message PotProof{
  uint64 Epoch = 1;
  bytes  Proof = 2;
  string Src = 3;
  string Des = 4;
}

message PoTResponse{
  uint64 Epoch = 1;
  int64  Desid = 2;
  string Des = 3;
  int64  Srcid = 4;
  string Src = 5 ;
  bytes  Proof = 6;
}

enum TxDataType{
  RawTx = 0;
  ExcutedTx = 1;
}

message TxData {
  TxDataType TxDataType= 1;
  bytes TxData = 2;
}

message DciTx{
  bytes TxID                  = 1;
  repeated TxInput TxInput    = 2;
  repeated TxOutput TxOutput  = 3;
  repeated CoinbaseProof Proof              = 4;
}

message TxInput{
  bool  IsCoinbase  = 1;
  bytes TxID        = 2;
  int64 Voutput     = 3;
  bytes Scriptsig   = 4;
  int64 Value       = 5;
  bytes Address     = 6;
  int32 ChainID     = 7;
}

message TxOutput{
  bytes Address    = 1;
  int64 Value      = 2;
  bool  IsSpent    = 3;
  bytes ScriptPk   = 4;
  int32 ChainID    = 5;
  uint64 LockTime   = 6;
}


message RawTxData {
  bytes TxID                  = 1;
  repeated TxInput TxInput    = 2;
  repeated TxOutput TxOutput  = 3;
  repeated CoinbaseProof CoinbaseProofs              = 4;
}

message ExecutedTxData{
  uint64  ExecutedHeight = 1;
  bytes   TxHash = 2;
}

message ExecuteBlock {
  ExecuteHeader Header = 1;
  repeated ExecutedTx Txs= 2;
}

message ExecuteHeader {
  uint64  Height = 1;
  bytes   BlockHash = 2;
  int64   ChainID = 3;
  bytes   TxsHash = 4;
}

message ExecutedTx{
  bytes   TxHash = 1;
  uint64  Height = 2;
  bytes   Data = 3;
}

service PoTExecutor {
  rpc   GetTxs(GetTxRequest) returns (GetTxResponse){}
  rpc   VerifyTxs(VerifyTxRequest) returns (VerifyTxResponse){}
}

message GetTxRequest{
  uint64 StartHeight = 1;
  string Des = 2;
}

message GetTxResponse{
  uint64 Start = 1;
  uint64 End = 2;
  repeated ExecuteBlock Blocks = 3;
  int64 Value = 4;
  bytes Address = 5;
}

message VerifyTxRequest{
  repeated ExecutedTxData Txs = 1;
}

message VerifyTxResponse{
  repeated ExecutedTxData Txs = 1;
  repeated bool flag =2;
}

service DciExector{
  rpc   SendDci(SendDciRequest)           returns (SendDciResponse)       {}
  rpc   GetBalance(GetBalanceRequest)     returns (GetBalanceResponse)    {}
  rpc   DevastateDci(DevastateDciRequest) returns (DevastateDciResponse)  {}
  rpc   VerifyUTXO(VerifyUTXORequest)     returns (VerifyUTXOResponse)    {}
}

message DciReward{
  bytes Address = 1;
  int64 Amount = 2;
  int64 ChainID = 3;
  DciProof DciProof = 4;
}

message DciProof {
  uint64 Height = 1 ;
  bytes BlockHash = 2;
  bytes  TxHash = 3;
}

message SendDciRequest{
  repeated DciReward DciReward = 1;
}

message SendDciResponse{
  bool IsSuccess = 1;
  uint64 Height = 2;
}

message GetBalanceRequest{
  bytes Address = 1;
  bytes Signature = 2;
}

message GetBalanceResponse{
  bytes Address = 1;
  int64 Balance = 2;
  repeated Utxo Utxos= 3;
}

message Utxo{
  bytes Txid = 1;
  int64 Voutput = 2;
  TxOutput TxOutput = 3;
}

message DevastateDciRequest{
    int64 Amount = 1;
    RawTxData Tx = 2;
    bytes To = 3;
    bytes transaction = 4;
}

message DevastateDciResponse{
  bool flag = 1;
}

message UTXOProof{
  uint64  Height  = 1;
  bytes   TxHash  = 2;
  bytes   Data    = 3;
}

message VerifyUTXORequest{
  bytes From = 1;
  bytes To = 2;
  int64 Value = 3;
  bytes Proof = 4;
}

message VerifyUTXOResponse{
  bool flag = 1;
}

message CoinbaseProof{
  bytes Address = 1;
  bytes TxHash = 2;
  int64 Amount = 3;
}