// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: pb/caulk_plus.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CpService_CreateMultiProof_FullMethodName  = "/caulk_plus.CpService/CreateMultiProof"
	CpService_VerifyMultiProof_FullMethodName  = "/caulk_plus.CpService/VerifyMultiProof"
	CpService_CreateSingleProof_FullMethodName = "/caulk_plus.CpService/CreateSingleProof"
	CpService_VerifySingleProof_FullMethodName = "/caulk_plus.CpService/VerifySingleProof"
	CpService_CalcRootsOfUnity_FullMethodName  = "/caulk_plus.CpService/CalcRootsOfUnity"
)

// CpServiceClient is the client API for CpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CpServiceClient interface {
	CreateMultiProof(ctx context.Context, in *CreateMultiProofRequest, opts ...grpc.CallOption) (*MultiProof, error)
	VerifyMultiProof(ctx context.Context, in *VerifyMultiProofRequest, opts ...grpc.CallOption) (*VerifyReply, error)
	CreateSingleProof(ctx context.Context, in *CreateSingleProofRequest, opts ...grpc.CallOption) (*SingleProof, error)
	VerifySingleProof(ctx context.Context, in *VerifySingleProofRequest, opts ...grpc.CallOption) (*VerifyReply, error)
	CalcRootsOfUnity(ctx context.Context, in *DomainSize, opts ...grpc.CallOption) (*RootsOfUnity, error)
}

type cpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCpServiceClient(cc grpc.ClientConnInterface) CpServiceClient {
	return &cpServiceClient{cc}
}

func (c *cpServiceClient) CreateMultiProof(ctx context.Context, in *CreateMultiProofRequest, opts ...grpc.CallOption) (*MultiProof, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiProof)
	err := c.cc.Invoke(ctx, CpService_CreateMultiProof_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cpServiceClient) VerifyMultiProof(ctx context.Context, in *VerifyMultiProofRequest, opts ...grpc.CallOption) (*VerifyReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyReply)
	err := c.cc.Invoke(ctx, CpService_VerifyMultiProof_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cpServiceClient) CreateSingleProof(ctx context.Context, in *CreateSingleProofRequest, opts ...grpc.CallOption) (*SingleProof, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleProof)
	err := c.cc.Invoke(ctx, CpService_CreateSingleProof_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cpServiceClient) VerifySingleProof(ctx context.Context, in *VerifySingleProofRequest, opts ...grpc.CallOption) (*VerifyReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyReply)
	err := c.cc.Invoke(ctx, CpService_VerifySingleProof_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cpServiceClient) CalcRootsOfUnity(ctx context.Context, in *DomainSize, opts ...grpc.CallOption) (*RootsOfUnity, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RootsOfUnity)
	err := c.cc.Invoke(ctx, CpService_CalcRootsOfUnity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CpServiceServer is the server API for CpService service.
// All implementations must embed UnimplementedCpServiceServer
// for forward compatibility
type CpServiceServer interface {
	CreateMultiProof(context.Context, *CreateMultiProofRequest) (*MultiProof, error)
	VerifyMultiProof(context.Context, *VerifyMultiProofRequest) (*VerifyReply, error)
	CreateSingleProof(context.Context, *CreateSingleProofRequest) (*SingleProof, error)
	VerifySingleProof(context.Context, *VerifySingleProofRequest) (*VerifyReply, error)
	CalcRootsOfUnity(context.Context, *DomainSize) (*RootsOfUnity, error)
	mustEmbedUnimplementedCpServiceServer()
}

// UnimplementedCpServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCpServiceServer struct {
}

func (UnimplementedCpServiceServer) CreateMultiProof(context.Context, *CreateMultiProofRequest) (*MultiProof, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMultiProof not implemented")
}
func (UnimplementedCpServiceServer) VerifyMultiProof(context.Context, *VerifyMultiProofRequest) (*VerifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyMultiProof not implemented")
}
func (UnimplementedCpServiceServer) CreateSingleProof(context.Context, *CreateSingleProofRequest) (*SingleProof, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSingleProof not implemented")
}
func (UnimplementedCpServiceServer) VerifySingleProof(context.Context, *VerifySingleProofRequest) (*VerifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifySingleProof not implemented")
}
func (UnimplementedCpServiceServer) CalcRootsOfUnity(context.Context, *DomainSize) (*RootsOfUnity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalcRootsOfUnity not implemented")
}
func (UnimplementedCpServiceServer) mustEmbedUnimplementedCpServiceServer() {}

// UnsafeCpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CpServiceServer will
// result in compilation errors.
type UnsafeCpServiceServer interface {
	mustEmbedUnimplementedCpServiceServer()
}

func RegisterCpServiceServer(s grpc.ServiceRegistrar, srv CpServiceServer) {
	s.RegisterService(&CpService_ServiceDesc, srv)
}

func _CpService_CreateMultiProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMultiProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpServiceServer).CreateMultiProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CpService_CreateMultiProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpServiceServer).CreateMultiProof(ctx, req.(*CreateMultiProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CpService_VerifyMultiProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyMultiProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpServiceServer).VerifyMultiProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CpService_VerifyMultiProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpServiceServer).VerifyMultiProof(ctx, req.(*VerifyMultiProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CpService_CreateSingleProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSingleProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpServiceServer).CreateSingleProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CpService_CreateSingleProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpServiceServer).CreateSingleProof(ctx, req.(*CreateSingleProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CpService_VerifySingleProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifySingleProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpServiceServer).VerifySingleProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CpService_VerifySingleProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpServiceServer).VerifySingleProof(ctx, req.(*VerifySingleProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CpService_CalcRootsOfUnity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainSize)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpServiceServer).CalcRootsOfUnity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CpService_CalcRootsOfUnity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpServiceServer).CalcRootsOfUnity(ctx, req.(*DomainSize))
	}
	return interceptor(ctx, in, info, handler)
}

// CpService_ServiceDesc is the grpc.ServiceDesc for CpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "caulk_plus.CpService",
	HandlerType: (*CpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMultiProof",
			Handler:    _CpService_CreateMultiProof_Handler,
		},
		{
			MethodName: "VerifyMultiProof",
			Handler:    _CpService_VerifyMultiProof_Handler,
		},
		{
			MethodName: "CreateSingleProof",
			Handler:    _CpService_CreateSingleProof_Handler,
		},
		{
			MethodName: "VerifySingleProof",
			Handler:    _CpService_VerifySingleProof_Handler,
		},
		{
			MethodName: "CalcRootsOfUnity",
			Handler:    _CpService_CalcRootsOfUnity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/caulk_plus.proto",
}
