// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.2
// source: pb/caulk_plus.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The request message
type CreateMultiProofRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentVectorSize uint32 `protobuf:"varint,1,opt,name=parent_vector_size,json=parentVectorSize,proto3" json:"parent_vector_size,omitempty"`
	ParentVector     []*Fr  `protobuf:"bytes,2,rep,name=parent_vector,json=parentVector,proto3" json:"parent_vector,omitempty"`
	SubVectorSize    uint32 `protobuf:"varint,3,opt,name=sub_vector_size,json=subVectorSize,proto3" json:"sub_vector_size,omitempty"`
	SubVector        []*Fr  `protobuf:"bytes,4,rep,name=sub_vector,json=subVector,proto3" json:"sub_vector,omitempty"`
	NodeId           uint64 `protobuf:"varint,5,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *CreateMultiProofRequest) Reset() {
	*x = CreateMultiProofRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_caulk_plus_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMultiProofRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMultiProofRequest) ProtoMessage() {}

func (x *CreateMultiProofRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_caulk_plus_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMultiProofRequest.ProtoReflect.Descriptor instead.
func (*CreateMultiProofRequest) Descriptor() ([]byte, []int) {
	return file_pb_caulk_plus_proto_rawDescGZIP(), []int{0}
}

func (x *CreateMultiProofRequest) GetParentVectorSize() uint32 {
	if x != nil {
		return x.ParentVectorSize
	}
	return 0
}

func (x *CreateMultiProofRequest) GetParentVector() []*Fr {
	if x != nil {
		return x.ParentVector
	}
	return nil
}

func (x *CreateMultiProofRequest) GetSubVectorSize() uint32 {
	if x != nil {
		return x.SubVectorSize
	}
	return 0
}

func (x *CreateMultiProofRequest) GetSubVector() []*Fr {
	if x != nil {
		return x.SubVector
	}
	return nil
}

func (x *CreateMultiProofRequest) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

type VerifyMultiProofRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MultiProof *MultiProof `protobuf:"bytes,1,opt,name=multi_proof,json=multiProof,proto3" json:"multi_proof,omitempty"`
	NodeId     uint64      `protobuf:"varint,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *VerifyMultiProofRequest) Reset() {
	*x = VerifyMultiProofRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_caulk_plus_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyMultiProofRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyMultiProofRequest) ProtoMessage() {}

func (x *VerifyMultiProofRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_caulk_plus_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyMultiProofRequest.ProtoReflect.Descriptor instead.
func (*VerifyMultiProofRequest) Descriptor() ([]byte, []int) {
	return file_pb_caulk_plus_proto_rawDescGZIP(), []int{1}
}

func (x *VerifyMultiProofRequest) GetMultiProof() *MultiProof {
	if x != nil {
		return x.MultiProof
	}
	return nil
}

func (x *VerifyMultiProofRequest) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

type MultiProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// size of parent vector
	N uint32 `protobuf:"varint,1,opt,name=n,proto3" json:"n,omitempty"`
	// size of domain H (padded)
	NPadded uint32 `protobuf:"varint,2,opt,name=n_padded,json=nPadded,proto3" json:"n_padded,omitempty"`
	// size of sub vector
	M uint32 `protobuf:"varint,3,opt,name=m,proto3" json:"m,omitempty"`
	// size of domain V (padded)
	MPadded uint32    `protobuf:"varint,4,opt,name=m_padded,json=mPadded,proto3" json:"m_padded,omitempty"`
	CCommit *G1Affine `protobuf:"bytes,5,opt,name=c_commit,json=cCommit,proto3" json:"c_commit,omitempty"`
	ACommit *G1Affine `protobuf:"bytes,6,opt,name=a_commit,json=aCommit,proto3" json:"a_commit,omitempty"`
	// response
	Z_I  *G1Affine `protobuf:"bytes,7,opt,name=z_I,json=zI,proto3" json:"z_I,omitempty"`
	C_I  *G1Affine `protobuf:"bytes,8,opt,name=c_I,json=cI,proto3" json:"c_I,omitempty"`
	U    *G1Affine `protobuf:"bytes,9,opt,name=u,proto3" json:"u,omitempty"`
	W    *G2Affine `protobuf:"bytes,10,opt,name=w,proto3" json:"w,omitempty"`
	H    *G1Affine `protobuf:"bytes,11,opt,name=h,proto3" json:"h,omitempty"`
	V1   *Fr       `protobuf:"bytes,12,opt,name=v1,proto3" json:"v1,omitempty"`
	Pi_1 *G1Affine `protobuf:"bytes,13,opt,name=pi_1,json=pi1,proto3" json:"pi_1,omitempty"`
	V2   *Fr       `protobuf:"bytes,14,opt,name=v2,proto3" json:"v2,omitempty"`
	Pi_2 *G1Affine `protobuf:"bytes,15,opt,name=pi_2,json=pi2,proto3" json:"pi_2,omitempty"`
	Pi_3 *G1Affine `protobuf:"bytes,16,opt,name=pi_3,json=pi3,proto3" json:"pi_3,omitempty"`
}

func (x *MultiProof) Reset() {
	*x = MultiProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_caulk_plus_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiProof) ProtoMessage() {}

func (x *MultiProof) ProtoReflect() protoreflect.Message {
	mi := &file_pb_caulk_plus_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiProof.ProtoReflect.Descriptor instead.
func (*MultiProof) Descriptor() ([]byte, []int) {
	return file_pb_caulk_plus_proto_rawDescGZIP(), []int{2}
}

func (x *MultiProof) GetN() uint32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *MultiProof) GetNPadded() uint32 {
	if x != nil {
		return x.NPadded
	}
	return 0
}

func (x *MultiProof) GetM() uint32 {
	if x != nil {
		return x.M
	}
	return 0
}

func (x *MultiProof) GetMPadded() uint32 {
	if x != nil {
		return x.MPadded
	}
	return 0
}

func (x *MultiProof) GetCCommit() *G1Affine {
	if x != nil {
		return x.CCommit
	}
	return nil
}

func (x *MultiProof) GetACommit() *G1Affine {
	if x != nil {
		return x.ACommit
	}
	return nil
}

func (x *MultiProof) GetZ_I() *G1Affine {
	if x != nil {
		return x.Z_I
	}
	return nil
}

func (x *MultiProof) GetC_I() *G1Affine {
	if x != nil {
		return x.C_I
	}
	return nil
}

func (x *MultiProof) GetU() *G1Affine {
	if x != nil {
		return x.U
	}
	return nil
}

func (x *MultiProof) GetW() *G2Affine {
	if x != nil {
		return x.W
	}
	return nil
}

func (x *MultiProof) GetH() *G1Affine {
	if x != nil {
		return x.H
	}
	return nil
}

func (x *MultiProof) GetV1() *Fr {
	if x != nil {
		return x.V1
	}
	return nil
}

func (x *MultiProof) GetPi_1() *G1Affine {
	if x != nil {
		return x.Pi_1
	}
	return nil
}

func (x *MultiProof) GetV2() *Fr {
	if x != nil {
		return x.V2
	}
	return nil
}

func (x *MultiProof) GetPi_2() *G1Affine {
	if x != nil {
		return x.Pi_2
	}
	return nil
}

func (x *MultiProof) GetPi_3() *G1Affine {
	if x != nil {
		return x.Pi_3
	}
	return nil
}

type CreateSingleProofRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// independent g1 generator
	HG1Generator *G1Affine `protobuf:"bytes,1,opt,name=h_g1_generator,json=hG1Generator,proto3" json:"h_g1_generator,omitempty"`
	// vector size
	ParentVectorSize uint32 `protobuf:"varint,2,opt,name=parent_vector_size,json=parentVectorSize,proto3" json:"parent_vector_size,omitempty"`
	// vector in u32
	ParentVector []*Fr `protobuf:"bytes,3,rep,name=parent_vector,json=parentVector,proto3" json:"parent_vector,omitempty"`
	// sub-vector in u32
	ChosenElement *Fr    `protobuf:"bytes,4,opt,name=chosen_element,json=chosenElement,proto3" json:"chosen_element,omitempty"`
	NodeId        uint64 `protobuf:"varint,5,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *CreateSingleProofRequest) Reset() {
	*x = CreateSingleProofRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_caulk_plus_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSingleProofRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSingleProofRequest) ProtoMessage() {}

func (x *CreateSingleProofRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_caulk_plus_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSingleProofRequest.ProtoReflect.Descriptor instead.
func (*CreateSingleProofRequest) Descriptor() ([]byte, []int) {
	return file_pb_caulk_plus_proto_rawDescGZIP(), []int{3}
}

func (x *CreateSingleProofRequest) GetHG1Generator() *G1Affine {
	if x != nil {
		return x.HG1Generator
	}
	return nil
}

func (x *CreateSingleProofRequest) GetParentVectorSize() uint32 {
	if x != nil {
		return x.ParentVectorSize
	}
	return 0
}

func (x *CreateSingleProofRequest) GetParentVector() []*Fr {
	if x != nil {
		return x.ParentVector
	}
	return nil
}

func (x *CreateSingleProofRequest) GetChosenElement() *Fr {
	if x != nil {
		return x.ChosenElement
	}
	return nil
}

func (x *CreateSingleProofRequest) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

type SingleProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// common input
	// size of domain H (origin)
	N uint32 `protobuf:"varint,1,opt,name=n,proto3" json:"n,omitempty"`
	// size of domain H (padded)
	NPadded uint32 `protobuf:"varint,2,opt,name=n_padded,json=nPadded,proto3" json:"n_padded,omitempty"`
	// KZG commitment 𝒄 = C[x]₁
	CCommit *G1Affine `protobuf:"bytes,3,opt,name=c_commit,json=cCommit,proto3" json:"c_commit,omitempty"`
	// Pedersen commitment 𝒗 = [v]₁ + r𝒉
	VCommit *G1Affine `protobuf:"bytes,4,opt,name=v_commit,json=vCommit,proto3" json:"v_commit,omitempty"`
	// R_Link^KZG proof
	MultiProof *MultiProof `protobuf:"bytes,5,opt,name=multi_proof,json=multiProof,proto3" json:"multi_proof,omitempty"`
	// sᵥ
	SV *Fr `protobuf:"bytes,6,opt,name=s_v,json=sV,proto3" json:"s_v,omitempty"`
	// sᵣ
	SR *Fr `protobuf:"bytes,7,opt,name=s_r,json=sR,proto3" json:"s_r,omitempty"`
	// sₖ
	SK *Fr `protobuf:"bytes,8,opt,name=s_k,json=sK,proto3" json:"s_k,omitempty"`
	// v ̃
	VTilde *G1Affine `protobuf:"bytes,9,opt,name=v_tilde,json=vTilde,proto3" json:"v_tilde,omitempty"`
	// 𝒂
	ACommit *G1Affine `protobuf:"bytes,10,opt,name=a_commit,json=aCommit,proto3" json:"a_commit,omitempty"`
	// ã
	ATilde *G1Affine `protobuf:"bytes,11,opt,name=a_tilde,json=aTilde,proto3" json:"a_tilde,omitempty"`
}

func (x *SingleProof) Reset() {
	*x = SingleProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_caulk_plus_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleProof) ProtoMessage() {}

func (x *SingleProof) ProtoReflect() protoreflect.Message {
	mi := &file_pb_caulk_plus_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleProof.ProtoReflect.Descriptor instead.
func (*SingleProof) Descriptor() ([]byte, []int) {
	return file_pb_caulk_plus_proto_rawDescGZIP(), []int{4}
}

func (x *SingleProof) GetN() uint32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *SingleProof) GetNPadded() uint32 {
	if x != nil {
		return x.NPadded
	}
	return 0
}

func (x *SingleProof) GetCCommit() *G1Affine {
	if x != nil {
		return x.CCommit
	}
	return nil
}

func (x *SingleProof) GetVCommit() *G1Affine {
	if x != nil {
		return x.VCommit
	}
	return nil
}

func (x *SingleProof) GetMultiProof() *MultiProof {
	if x != nil {
		return x.MultiProof
	}
	return nil
}

func (x *SingleProof) GetSV() *Fr {
	if x != nil {
		return x.SV
	}
	return nil
}

func (x *SingleProof) GetSR() *Fr {
	if x != nil {
		return x.SR
	}
	return nil
}

func (x *SingleProof) GetSK() *Fr {
	if x != nil {
		return x.SK
	}
	return nil
}

func (x *SingleProof) GetVTilde() *G1Affine {
	if x != nil {
		return x.VTilde
	}
	return nil
}

func (x *SingleProof) GetACommit() *G1Affine {
	if x != nil {
		return x.ACommit
	}
	return nil
}

func (x *SingleProof) GetATilde() *G1Affine {
	if x != nil {
		return x.ATilde
	}
	return nil
}

type VerifySingleProofRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HGenerator  *G1Affine    `protobuf:"bytes,1,opt,name=h_generator,json=hGenerator,proto3" json:"h_generator,omitempty"`
	SingleProof *SingleProof `protobuf:"bytes,2,opt,name=single_proof,json=singleProof,proto3" json:"single_proof,omitempty"`
	NodeId      uint64       `protobuf:"varint,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *VerifySingleProofRequest) Reset() {
	*x = VerifySingleProofRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_caulk_plus_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifySingleProofRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifySingleProofRequest) ProtoMessage() {}

func (x *VerifySingleProofRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_caulk_plus_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifySingleProofRequest.ProtoReflect.Descriptor instead.
func (*VerifySingleProofRequest) Descriptor() ([]byte, []int) {
	return file_pb_caulk_plus_proto_rawDescGZIP(), []int{5}
}

func (x *VerifySingleProofRequest) GetHGenerator() *G1Affine {
	if x != nil {
		return x.HGenerator
	}
	return nil
}

func (x *VerifySingleProofRequest) GetSingleProof() *SingleProof {
	if x != nil {
		return x.SingleProof
	}
	return nil
}

func (x *VerifySingleProofRequest) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

type VerifyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Res bool `protobuf:"varint,1,opt,name=res,proto3" json:"res,omitempty"`
}

func (x *VerifyReply) Reset() {
	*x = VerifyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_caulk_plus_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyReply) ProtoMessage() {}

func (x *VerifyReply) ProtoReflect() protoreflect.Message {
	mi := &file_pb_caulk_plus_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyReply.ProtoReflect.Descriptor instead.
func (*VerifyReply) Descriptor() ([]byte, []int) {
	return file_pb_caulk_plus_proto_rawDescGZIP(), []int{6}
}

func (x *VerifyReply) GetRes() bool {
	if x != nil {
		return x.Res
	}
	return false
}

type DomainSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size uint32 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *DomainSize) Reset() {
	*x = DomainSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_caulk_plus_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainSize) ProtoMessage() {}

func (x *DomainSize) ProtoReflect() protoreflect.Message {
	mi := &file_pb_caulk_plus_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainSize.ProtoReflect.Descriptor instead.
func (*DomainSize) Descriptor() ([]byte, []int) {
	return file_pb_caulk_plus_proto_rawDescGZIP(), []int{7}
}

func (x *DomainSize) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type RootsOfUnity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size  uint32 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	Roots []*Fr  `protobuf:"bytes,2,rep,name=roots,proto3" json:"roots,omitempty"`
}

func (x *RootsOfUnity) Reset() {
	*x = RootsOfUnity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_caulk_plus_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RootsOfUnity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RootsOfUnity) ProtoMessage() {}

func (x *RootsOfUnity) ProtoReflect() protoreflect.Message {
	mi := &file_pb_caulk_plus_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RootsOfUnity.ProtoReflect.Descriptor instead.
func (*RootsOfUnity) Descriptor() ([]byte, []int) {
	return file_pb_caulk_plus_proto_rawDescGZIP(), []int{8}
}

func (x *RootsOfUnity) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *RootsOfUnity) GetRoots() []*Fr {
	if x != nil {
		return x.Roots
	}
	return nil
}

var File_pb_caulk_plus_proto protoreflect.FileDescriptor

var file_pb_caulk_plus_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x62, 0x2f, 0x63, 0x61, 0x75, 0x6c, 0x6b, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x63, 0x61, 0x75, 0x6c, 0x6b, 0x5f, 0x70, 0x6c, 0x75,
	0x73, 0x1a, 0x12, 0x70, 0x62, 0x2f, 0x62, 0x6c, 0x73, 0x31, 0x32, 0x5f, 0x33, 0x38, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xea, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x32, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x6c, 0x73, 0x31, 0x32, 0x5f, 0x33,
	0x38, 0x31, 0x2e, 0x46, 0x72, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x75,
	0x62, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x0a, 0x73,
	0x75, 0x62, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x62, 0x6c, 0x73, 0x31, 0x32, 0x5f, 0x33, 0x38, 0x31, 0x2e, 0x46, 0x72, 0x52, 0x09,
	0x73, 0x75, 0x62, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x22, 0x6b, 0x0a, 0x17, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a,
	0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x61, 0x75, 0x6c, 0x6b, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22,
	0xa9, 0x04, 0x0a, 0x0a, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x0c,
	0x0a, 0x01, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x6e, 0x5f, 0x70, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x6e, 0x50, 0x61, 0x64, 0x64, 0x65, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x01, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x5f, 0x70, 0x61, 0x64, 0x64, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x50, 0x61, 0x64, 0x64, 0x65, 0x64,
	0x12, 0x2e, 0x0a, 0x08, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6c, 0x73, 0x31, 0x32, 0x5f, 0x33, 0x38, 0x31, 0x2e, 0x47,
	0x31, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x65, 0x52, 0x07, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x12, 0x2e, 0x0a, 0x08, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6c, 0x73, 0x31, 0x32, 0x5f, 0x33, 0x38, 0x31, 0x2e, 0x47,
	0x31, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x65, 0x52, 0x07, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x12, 0x24, 0x0a, 0x03, 0x7a, 0x5f, 0x49, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x62, 0x6c, 0x73, 0x31, 0x32, 0x5f, 0x33, 0x38, 0x31, 0x2e, 0x47, 0x31, 0x41, 0x66, 0x66, 0x69,
	0x6e, 0x65, 0x52, 0x02, 0x7a, 0x49, 0x12, 0x24, 0x0a, 0x03, 0x63, 0x5f, 0x49, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6c, 0x73, 0x31, 0x32, 0x5f, 0x33, 0x38, 0x31, 0x2e,
	0x47, 0x31, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x65, 0x52, 0x02, 0x63, 0x49, 0x12, 0x21, 0x0a, 0x01,
	0x75, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6c, 0x73, 0x31, 0x32, 0x5f,
	0x33, 0x38, 0x31, 0x2e, 0x47, 0x31, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x65, 0x52, 0x01, 0x75, 0x12,
	0x21, 0x0a, 0x01, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6c, 0x73,
	0x31, 0x32, 0x5f, 0x33, 0x38, 0x31, 0x2e, 0x47, 0x32, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x65, 0x52,
	0x01, 0x77, 0x12, 0x21, 0x0a, 0x01, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x62, 0x6c, 0x73, 0x31, 0x32, 0x5f, 0x33, 0x38, 0x31, 0x2e, 0x47, 0x31, 0x41, 0x66, 0x66, 0x69,
	0x6e, 0x65, 0x52, 0x01, 0x68, 0x12, 0x1d, 0x0a, 0x02, 0x76, 0x31, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x6c, 0x73, 0x31, 0x32, 0x5f, 0x33, 0x38, 0x31, 0x2e, 0x46, 0x72,
	0x52, 0x02, 0x76, 0x31, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x69, 0x5f, 0x31, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6c, 0x73, 0x31, 0x32, 0x5f, 0x33, 0x38, 0x31, 0x2e, 0x47,
	0x31, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x65, 0x52, 0x03, 0x70, 0x69, 0x31, 0x12, 0x1d, 0x0a, 0x02,
	0x76, 0x32, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x6c, 0x73, 0x31, 0x32,
	0x5f, 0x33, 0x38, 0x31, 0x2e, 0x46, 0x72, 0x52, 0x02, 0x76, 0x32, 0x12, 0x26, 0x0a, 0x04, 0x70,
	0x69, 0x5f, 0x32, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6c, 0x73, 0x31,
	0x32, 0x5f, 0x33, 0x38, 0x31, 0x2e, 0x47, 0x31, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x65, 0x52, 0x03,
	0x70, 0x69, 0x32, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x69, 0x5f, 0x33, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6c, 0x73, 0x31, 0x32, 0x5f, 0x33, 0x38, 0x31, 0x2e, 0x47, 0x31,
	0x41, 0x66, 0x66, 0x69, 0x6e, 0x65, 0x52, 0x03, 0x70, 0x69, 0x33, 0x22, 0x86, 0x02, 0x0a, 0x18,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0e, 0x68, 0x5f, 0x67, 0x31,
	0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x62, 0x6c, 0x73, 0x31, 0x32, 0x5f, 0x33, 0x38, 0x31, 0x2e, 0x47, 0x31, 0x41,
	0x66, 0x66, 0x69, 0x6e, 0x65, 0x52, 0x0c, 0x68, 0x47, 0x31, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x32, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x6c, 0x73, 0x31, 0x32,
	0x5f, 0x33, 0x38, 0x31, 0x2e, 0x46, 0x72, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x0e, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x5f,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x62, 0x6c, 0x73, 0x31, 0x32, 0x5f, 0x33, 0x38, 0x31, 0x2e, 0x46, 0x72, 0x52, 0x0d, 0x63, 0x68,
	0x6f, 0x73, 0x65, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x22, 0xbb, 0x03, 0x0a, 0x0b, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x12, 0x0c, 0x0a, 0x01, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x01, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x5f, 0x70, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x50, 0x61, 0x64, 0x64, 0x65, 0x64, 0x12, 0x2e, 0x0a,
	0x08, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x62, 0x6c, 0x73, 0x31, 0x32, 0x5f, 0x33, 0x38, 0x31, 0x2e, 0x47, 0x31, 0x41, 0x66,
	0x66, 0x69, 0x6e, 0x65, 0x52, 0x07, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x2e, 0x0a,
	0x08, 0x76, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x62, 0x6c, 0x73, 0x31, 0x32, 0x5f, 0x33, 0x38, 0x31, 0x2e, 0x47, 0x31, 0x41, 0x66,
	0x66, 0x69, 0x6e, 0x65, 0x52, 0x07, 0x76, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x37, 0x0a,
	0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x61, 0x75, 0x6c, 0x6b, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x1e, 0x0a, 0x03, 0x73, 0x5f, 0x76, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x6c, 0x73, 0x31, 0x32, 0x5f, 0x33, 0x38, 0x31, 0x2e,
	0x46, 0x72, 0x52, 0x02, 0x73, 0x56, 0x12, 0x1e, 0x0a, 0x03, 0x73, 0x5f, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x6c, 0x73, 0x31, 0x32, 0x5f, 0x33, 0x38, 0x31, 0x2e,
	0x46, 0x72, 0x52, 0x02, 0x73, 0x52, 0x12, 0x1e, 0x0a, 0x03, 0x73, 0x5f, 0x6b, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x6c, 0x73, 0x31, 0x32, 0x5f, 0x33, 0x38, 0x31, 0x2e,
	0x46, 0x72, 0x52, 0x02, 0x73, 0x4b, 0x12, 0x2c, 0x0a, 0x07, 0x76, 0x5f, 0x74, 0x69, 0x6c, 0x64,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6c, 0x73, 0x31, 0x32, 0x5f,
	0x33, 0x38, 0x31, 0x2e, 0x47, 0x31, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x65, 0x52, 0x06, 0x76, 0x54,
	0x69, 0x6c, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6c, 0x73, 0x31, 0x32, 0x5f, 0x33,
	0x38, 0x31, 0x2e, 0x47, 0x31, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x65, 0x52, 0x07, 0x61, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x61, 0x5f, 0x74, 0x69, 0x6c, 0x64, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6c, 0x73, 0x31, 0x32, 0x5f, 0x33, 0x38,
	0x31, 0x2e, 0x47, 0x31, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x65, 0x52, 0x06, 0x61, 0x54, 0x69, 0x6c,
	0x64, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x18, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x34, 0x0a, 0x0b, 0x68, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6c, 0x73, 0x31, 0x32, 0x5f, 0x33, 0x38, 0x31,
	0x2e, 0x47, 0x31, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x65, 0x52, 0x0a, 0x68, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x61,
	0x75, 0x6c, 0x6b, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x52, 0x0b, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x1f, 0x0a, 0x0b, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x72, 0x65, 0x73, 0x22, 0x20, 0x0a, 0x0a, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x47, 0x0a,
	0x0c, 0x52, 0x6f, 0x6f, 0x74, 0x73, 0x4f, 0x66, 0x55, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x23, 0x0a, 0x05, 0x72, 0x6f, 0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x62, 0x6c, 0x73, 0x31, 0x32, 0x5f, 0x33, 0x38, 0x31, 0x2e, 0x46, 0x72, 0x52,
	0x05, 0x72, 0x6f, 0x6f, 0x74, 0x73, 0x32, 0xa6, 0x03, 0x0a, 0x09, 0x43, 0x70, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x23, 0x2e, 0x63, 0x61, 0x75, 0x6c, 0x6b,
	0x5f, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x63, 0x61, 0x75, 0x6c, 0x6b, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x23, 0x2e, 0x63, 0x61,
	0x75, 0x6c, 0x6b, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x63, 0x61, 0x75, 0x6c, 0x6b, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x11, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x12, 0x24, 0x2e, 0x63, 0x61, 0x75, 0x6c, 0x6b, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x63, 0x61, 0x75, 0x6c, 0x6b, 0x5f, 0x70,
	0x6c, 0x75, 0x73, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x22,
	0x00, 0x12, 0x54, 0x0a, 0x11, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x24, 0x2e, 0x63, 0x61, 0x75, 0x6c, 0x6b, 0x5f, 0x70,
	0x6c, 0x75, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x63,
	0x61, 0x75, 0x6c, 0x6b, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x10, 0x43, 0x61, 0x6c, 0x63, 0x52,
	0x6f, 0x6f, 0x74, 0x73, 0x4f, 0x66, 0x55, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x16, 0x2e, 0x63, 0x61,
	0x75, 0x6c, 0x6b, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53,
	0x69, 0x7a, 0x65, 0x1a, 0x18, 0x2e, 0x63, 0x61, 0x75, 0x6c, 0x6b, 0x5f, 0x70, 0x6c, 0x75, 0x73,
	0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x73, 0x4f, 0x66, 0x55, 0x6e, 0x69, 0x74, 0x79, 0x22, 0x00, 0x42,
	0x05, 0x5a, 0x03, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_caulk_plus_proto_rawDescOnce sync.Once
	file_pb_caulk_plus_proto_rawDescData = file_pb_caulk_plus_proto_rawDesc
)

func file_pb_caulk_plus_proto_rawDescGZIP() []byte {
	file_pb_caulk_plus_proto_rawDescOnce.Do(func() {
		file_pb_caulk_plus_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_caulk_plus_proto_rawDescData)
	})
	return file_pb_caulk_plus_proto_rawDescData
}

var file_pb_caulk_plus_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_pb_caulk_plus_proto_goTypes = []any{
	(*CreateMultiProofRequest)(nil),  // 0: caulk_plus.CreateMultiProofRequest
	(*VerifyMultiProofRequest)(nil),  // 1: caulk_plus.VerifyMultiProofRequest
	(*MultiProof)(nil),               // 2: caulk_plus.MultiProof
	(*CreateSingleProofRequest)(nil), // 3: caulk_plus.CreateSingleProofRequest
	(*SingleProof)(nil),              // 4: caulk_plus.SingleProof
	(*VerifySingleProofRequest)(nil), // 5: caulk_plus.VerifySingleProofRequest
	(*VerifyReply)(nil),              // 6: caulk_plus.VerifyReply
	(*DomainSize)(nil),               // 7: caulk_plus.DomainSize
	(*RootsOfUnity)(nil),             // 8: caulk_plus.RootsOfUnity
	(*Fr)(nil),                       // 9: bls12_381.Fr
	(*G1Affine)(nil),                 // 10: bls12_381.G1Affine
	(*G2Affine)(nil),                 // 11: bls12_381.G2Affine
}
var file_pb_caulk_plus_proto_depIdxs = []int32{
	9,  // 0: caulk_plus.CreateMultiProofRequest.parent_vector:type_name -> bls12_381.Fr
	9,  // 1: caulk_plus.CreateMultiProofRequest.sub_vector:type_name -> bls12_381.Fr
	2,  // 2: caulk_plus.VerifyMultiProofRequest.multi_proof:type_name -> caulk_plus.MultiProof
	10, // 3: caulk_plus.MultiProof.c_commit:type_name -> bls12_381.G1Affine
	10, // 4: caulk_plus.MultiProof.a_commit:type_name -> bls12_381.G1Affine
	10, // 5: caulk_plus.MultiProof.z_I:type_name -> bls12_381.G1Affine
	10, // 6: caulk_plus.MultiProof.c_I:type_name -> bls12_381.G1Affine
	10, // 7: caulk_plus.MultiProof.u:type_name -> bls12_381.G1Affine
	11, // 8: caulk_plus.MultiProof.w:type_name -> bls12_381.G2Affine
	10, // 9: caulk_plus.MultiProof.h:type_name -> bls12_381.G1Affine
	9,  // 10: caulk_plus.MultiProof.v1:type_name -> bls12_381.Fr
	10, // 11: caulk_plus.MultiProof.pi_1:type_name -> bls12_381.G1Affine
	9,  // 12: caulk_plus.MultiProof.v2:type_name -> bls12_381.Fr
	10, // 13: caulk_plus.MultiProof.pi_2:type_name -> bls12_381.G1Affine
	10, // 14: caulk_plus.MultiProof.pi_3:type_name -> bls12_381.G1Affine
	10, // 15: caulk_plus.CreateSingleProofRequest.h_g1_generator:type_name -> bls12_381.G1Affine
	9,  // 16: caulk_plus.CreateSingleProofRequest.parent_vector:type_name -> bls12_381.Fr
	9,  // 17: caulk_plus.CreateSingleProofRequest.chosen_element:type_name -> bls12_381.Fr
	10, // 18: caulk_plus.SingleProof.c_commit:type_name -> bls12_381.G1Affine
	10, // 19: caulk_plus.SingleProof.v_commit:type_name -> bls12_381.G1Affine
	2,  // 20: caulk_plus.SingleProof.multi_proof:type_name -> caulk_plus.MultiProof
	9,  // 21: caulk_plus.SingleProof.s_v:type_name -> bls12_381.Fr
	9,  // 22: caulk_plus.SingleProof.s_r:type_name -> bls12_381.Fr
	9,  // 23: caulk_plus.SingleProof.s_k:type_name -> bls12_381.Fr
	10, // 24: caulk_plus.SingleProof.v_tilde:type_name -> bls12_381.G1Affine
	10, // 25: caulk_plus.SingleProof.a_commit:type_name -> bls12_381.G1Affine
	10, // 26: caulk_plus.SingleProof.a_tilde:type_name -> bls12_381.G1Affine
	10, // 27: caulk_plus.VerifySingleProofRequest.h_generator:type_name -> bls12_381.G1Affine
	4,  // 28: caulk_plus.VerifySingleProofRequest.single_proof:type_name -> caulk_plus.SingleProof
	9,  // 29: caulk_plus.RootsOfUnity.roots:type_name -> bls12_381.Fr
	0,  // 30: caulk_plus.CpService.CreateMultiProof:input_type -> caulk_plus.CreateMultiProofRequest
	1,  // 31: caulk_plus.CpService.VerifyMultiProof:input_type -> caulk_plus.VerifyMultiProofRequest
	3,  // 32: caulk_plus.CpService.CreateSingleProof:input_type -> caulk_plus.CreateSingleProofRequest
	5,  // 33: caulk_plus.CpService.VerifySingleProof:input_type -> caulk_plus.VerifySingleProofRequest
	7,  // 34: caulk_plus.CpService.CalcRootsOfUnity:input_type -> caulk_plus.DomainSize
	2,  // 35: caulk_plus.CpService.CreateMultiProof:output_type -> caulk_plus.MultiProof
	6,  // 36: caulk_plus.CpService.VerifyMultiProof:output_type -> caulk_plus.VerifyReply
	4,  // 37: caulk_plus.CpService.CreateSingleProof:output_type -> caulk_plus.SingleProof
	6,  // 38: caulk_plus.CpService.VerifySingleProof:output_type -> caulk_plus.VerifyReply
	8,  // 39: caulk_plus.CpService.CalcRootsOfUnity:output_type -> caulk_plus.RootsOfUnity
	35, // [35:40] is the sub-list for method output_type
	30, // [30:35] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_pb_caulk_plus_proto_init() }
func file_pb_caulk_plus_proto_init() {
	if File_pb_caulk_plus_proto != nil {
		return
	}
	file_pb_bls12_381_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_pb_caulk_plus_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CreateMultiProofRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_caulk_plus_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*VerifyMultiProofRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_caulk_plus_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*MultiProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_caulk_plus_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CreateSingleProofRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_caulk_plus_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*SingleProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_caulk_plus_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*VerifySingleProofRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_caulk_plus_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*VerifyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_caulk_plus_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*DomainSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_caulk_plus_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*RootsOfUnity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_caulk_plus_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_caulk_plus_proto_goTypes,
		DependencyIndexes: file_pb_caulk_plus_proto_depIdxs,
		MessageInfos:      file_pb_caulk_plus_proto_msgTypes,
	}.Build()
	File_pb_caulk_plus_proto = out.File
	file_pb_caulk_plus_proto_rawDesc = nil
	file_pb_caulk_plus_proto_goTypes = nil
	file_pb_caulk_plus_proto_depIdxs = nil
}
