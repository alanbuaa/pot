syntax = "proto3";
package caulk_plus;

option go_package="/pb";


import "pb/bls12_381.proto";

service CpService {
  rpc CreateMultiProof (CreateMultiProofRequest) returns (MultiProof) {}
  rpc VerifyMultiProof (MultiProof) returns (VerifyReply) {}
  rpc CreateSingleProof (CreateSingleProofRequest) returns (SingleProof) {}
  rpc VerifySingleProof (VerifySingleProofRequest) returns (VerifyReply) {}
  rpc CalcRootsOfUnity (DomainSize) returns (RootsOfUnity) {}
}


// The request message
message CreateMultiProofRequest {
  uint32 parent_vector_size = 1;
  repeated bls12_381.Fr parent_vector = 2;
  uint32 sub_vector_size = 3;
  repeated bls12_381.Fr sub_vector = 4;
}

message MultiProof {
  // size of parent vector
  uint32 n = 1;
  // size of domain H (padded)
  uint32 n_padded = 2;
  // size of sub vector
  uint32  m = 3;
  // size of domain V (padded)
  uint32 m_padded = 4;
  bls12_381.G1Affine c_commit = 5;
  bls12_381.G1Affine a_commit = 6;
  // response
  bls12_381.G1Affine z_I = 7;
  bls12_381.G1Affine c_I = 8;
  bls12_381.G1Affine u = 9;
  bls12_381.G2Affine w = 10;
  bls12_381.G1Affine h = 11;
  bls12_381.Fr v1 = 12;
  bls12_381.G1Affine pi_1 = 13;
  bls12_381.Fr v2 = 14;
  bls12_381.G1Affine pi_2 = 15;
  bls12_381.G1Affine pi_3 = 16;
}

message CreateSingleProofRequest {
  // independent g1 generator
  bls12_381.G1Affine h_g1_generator = 1;
  // vector size
  uint32 parent_vector_size = 2;
  // vector in u32
  repeated bls12_381.Fr parent_vector = 3;
  // sub-vector in u32
  bls12_381.Fr chosen_element = 4;
}

message SingleProof {
  // common input
  // size of domain H (origin)
  uint32 n = 1;
  // size of domain H (padded)
  uint32 n_padded = 2;
  // KZG commitment ùíÑ = C[x]‚ÇÅ
  bls12_381.G1Affine c_commit = 3;
  // Pedersen commitment ùíó = [v]‚ÇÅ + rùíâ
  bls12_381.G1Affine v_commit = 4;
  // R_Link^KZG proof
  MultiProof multi_proof = 5;
  // s·µ•
  bls12_381.Fr s_v = 6;
  // s·µ£
  bls12_381.Fr s_r = 7;
  // s‚Çñ
  bls12_381.Fr s_k = 8;
  // v ÃÉ
  bls12_381.G1Affine v_tilde = 9;
  // ùíÇ
  bls12_381.G1Affine a_commit = 10;
  // aÃÉ
  bls12_381.G1Affine a_tilde = 11;
}

message VerifySingleProofRequest{
  bls12_381.G1Affine h_generator = 1;
  SingleProof single_proof = 2;
}

message VerifyReply{
  bool res = 1;
}

message DomainSize{
  uint32 size = 1;
}

message RootsOfUnity{
  uint32 size = 1;
  repeated bls12_381.Fr roots = 2;
}